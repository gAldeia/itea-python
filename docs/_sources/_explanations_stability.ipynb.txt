{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "760fb84a",
   "metadata": {},
   "source": [
    "# Explanations Stability\n",
    "\n",
    "In this notebook, we will explore how to calculate the stability of a local explanation for the Partial Effects explainer. We'll first start creating a classifier and fitting it with the iris data set. Then, we'll define the stability metric function and see how stable are the explanations.\n",
    "\n",
    "This example was inspired by the usage of the stability metric in _Plumb, Gregory, Maruan, Al-Shedivat, Ángel Alexander, Cabrera, Adam, Perer, Eric, Xing, and Ameet, Talwalkar. \"Regularizing Black-box Models for Improved Interpretability.\" . Advances in Neural Information Processing Systems (pp. 10526–10536). Curran Associates, Inc., 2020._"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "dd75b3fc",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy  as np\n",
    "import pandas as pd\n",
    "\n",
    "# automatically differentiable implementation of numpy\n",
    "import jax.numpy as jnp # v0.2.13\n",
    "\n",
    "from sklearn import datasets\n",
    "\n",
    "from sklearn.model_selection import train_test_split\n",
    "from IPython.display         import display\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "from itea.classification import ITEA_classifier\n",
    "from itea.inspection     import *\n",
    "\n",
    "import warnings\n",
    "warnings.filterwarnings(action='ignore', module=r'itea')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0722b572",
   "metadata": {},
   "source": [
    "Let us start by loading the data set and fitting a simple classifier. Latter, the classifier will be used to explain a single instance and the stability of the explanation will be calculated for different sizes of neighborhoods."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "efbd78e4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "gen | smallest fitness | mean fitness | highest fitness | remaining time (s)\n",
      "----------------------------------------------------------------------------\n",
      "  0 |         0.560000 |     0.848200 |        0.970000 | 0min17seg   \n",
      "  5 |         0.740000 |     0.961800 |        0.980000 | 0min12seg   \n",
      " 10 |         0.790000 |     0.969400 |        0.990000 | 0min13seg   \n",
      " 15 |         0.950000 |     0.982200 |        0.990000 | 0min10seg   \n",
      " 20 |         0.890000 |     0.982200 |        0.990000 | 0min10seg   \n",
      " 25 |         0.860000 |     0.982400 |        0.990000 | 0min11seg   \n",
      " 30 |         0.930000 |     0.981800 |        0.990000 | 0min6seg    \n",
      " 35 |         0.960000 |     0.982600 |        0.990000 | 0min5seg    \n",
      " 40 |         0.940000 |     0.981600 |        0.990000 | 0min3seg    \n",
      " 45 |         0.660000 |     0.973800 |        0.990000 | 0min2seg    \n"
     ]
    }
   ],
   "source": [
    "iris_data = datasets.load_iris()\n",
    "X, y      = iris_data['data'], iris_data['target']\n",
    "labels    = iris_data['feature_names']\n",
    "targets   = iris_data['target_names']\n",
    "\n",
    "# changing numbers to the class names\n",
    "y_targets = [targets[yi] for yi in y]\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(\n",
    "    X, y_targets, test_size=0.33, random_state=42)\n",
    "\n",
    "# Creating transformation functions for ITEA using jax.numpy\n",
    "# (so we don't need to analytically calculate its derivatives)\n",
    "tfuncs = {\n",
    "    'id'       : lambda x: x,\n",
    "    'sqrt.abs' : lambda x: jnp.sqrt(jnp.abs(x)), \n",
    "    'log'      : jnp.log,\n",
    "    'exp'      : jnp.exp\n",
    "}\n",
    "\n",
    "clf = ITEA_classifier(\n",
    "    gens            = 50,\n",
    "    popsize         = 50,\n",
    "    max_terms       = 2,\n",
    "    expolim         = (-1, 1),\n",
    "    verbose         = 5,\n",
    "    tfuncs          = tfuncs,\n",
    "    labels          = labels,\n",
    "    simplify_method = 'simplify_by_var',\n",
    "    random_state    = 42,\n",
    ").fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d66374e5",
   "metadata": {},
   "source": [
    "## Local explanations with the Partial Effects\n",
    "\n",
    "To calculate the local explanations, we can use the function ``ITExpr_explainer.average_partial_effects``, passing as an argument a single sample we want to explain.\n",
    "\n",
    "We can see the explanation both visually or as an array with the importance for each feature.\n",
    "\n",
    "Let's start by creating an explainer instance.\n",
    "\n",
    "**NOTE**: In the remaining of this notebook, all local explanations will be calculated over the first element of the test set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "6eeb7667",
   "metadata": {},
   "outputs": [],
   "source": [
    "explainer = ITExpr_explainer(\n",
    "    itexpr=clf.bestsol_,\n",
    "    tfuncs=tfuncs\n",
    ").fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c367859c",
   "metadata": {},
   "source": [
    "The visual inspection of feature importances can be useful in some cases:\n",
    "* The features are ordered by the most important to the least important feature;\n",
    "* The proportions between feature importances allows having a more clear understanding about its magnitudes;\n",
    "* We can see how much each class is using each feature to make its classification.\n",
    "\n",
    "It is important to notice that the prediction of the model is based on the class with the highest probability from the decision function. The decision function is a logit function using the IT expression as its linear model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "cdd10d78",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAdoAAAEHCAYAAAAJRIdeAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjQuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8rg+JYAAAACXBIWXMAAAsTAAALEwEAmpwYAAA0IklEQVR4nO3de3wV1bn/8c8DIaKCAlo0EBQUgZgQAoiId7SiIq21oMDPW/B2qPff7+hBT6tS21P1eK9SsWpNi0qxqPVWqRXvyMUACQkBRGwEAooRBCLhkuT5/bEncSfZITshQ4B836/XfjF7Zs2aZw0bnr3WzJ5l7o6IiIiEo1VzByAiIrIvU6IVEREJkRKtiIhIiJRoRUREQqREKyIiEiIlWhERkRAlNHcAsuc555xzfMaMGc0dhojI3sTq2qAerdRSXFzc3CGIiOwzlGhFRERCpEQrIiISIiVaERGRECnRioiIhEiJVkREJERKtCIiIiFSohUREQmREq2IiEiITBO/S01tEhO9bMeOJqvvgMTWbDco21beZHWKiMSSlJzEmlVrmuPQdT4ZSolWajEzP3LCG01W35f3jQAgLSutyeoUEYklPzOfZspregSjiIhIc1CiFRERCZESrYiISIiUaEVEREKkRCsiIhIiJVoREZEQKdGKiIiESIlWREQkREq0IiIiIVKiFRERCZESrYiISIiUaEVEREKkRCsiIhIiJVoREZEQKdGKiEiLsGrVKoYOHUpKSgqpqak8+uijtco8//zzpKenk56ezoknnkhubm7Vtu+++45Ro0bRp08fUlJSmD17dlzHbXSiNbM/mdk6M8vfSZmLzWxR8PrEzPo19niNZWYdzOzaOMuWNPIY/zCzDjHWTzSzW4LlTDPrErWt0MwOjaPu/mb2dGPiqlFPXzPL2tV6RET2VgkJCTz44IMsWbKEOXPmMGnSJAoKCqqV6dGjBx988AGLFi3ijjvu4JprrqnadtNNN3HOOeewdOlScnNzSUlJieu4u9KjzQLOqafMv4HT3D0d+A3wx104XmN1AOJKtI3l7sPd/bt6imUCXeopE8t/A481Yr9q3D0PSDazI3a1LhGRvVFSUhIDBgwAoH379qSkpFBUVFStzIknnkjHjh0BOOGEE1i9ejUAmzZt4sMPP+TKK68EIDExkQ4dOsR13EYnWnf/EFhfT5lP3H1D8HYOkNzY41UKeolTzOxdM1tuZldHbbvVzD4NetC/DlbfCxxtZjlmdr+ZtTOzmWa2wMzyzOz8eo73X2Z2Y7D8sJm9GyyfaWbPBctVvVMz+6WZLTOzd4DewbpRwHHA80Ec+wfV3xAVR58Yx24PpLt7bvC+nZk9G5RfZGYjg/UlZnafmc03s3fM7Hgze9/MvjCzn0ZV+TowpkEnXERkH1RYWMjChQsZPHhwnWWeeeYZzj33XAC++OILfvSjHzFu3Dj69+/PVVddxffffx/XsXbnNdorgbdibTCzaUECqvm6rI660oHzgCHAnWbWxcyGAccAxwMZwEAzOxW4DVjh7hnufiuwFbjA3QcAQ4EHzcx2EveHwCnB8nFAOzNrA5wMfFSjHQOJJLL+wM+BQQDuPh3IBi4O4igNdikO4ngCuCXGsY8Doofm7wA2unvfYJTg3WD9gcD77j4Q2Az8FjgLuAC4O2r/7Ki2iIi0SCUlJYwcOZJHHnmEgw46KGaZ9957j2eeeYb77rsPgLKyMhYsWMAvfvELFi5cyIEHHsi9994b1/F2S6I1s6FEEu2EWNvdfXSQgGq+/lJHla+6e6m7FwPvEUmuw4LXQmAB0IdI4q0VDvA7M1sEvAN0BQ7bSfjziSTt9sA2YDaRBHgKNRJtsO4Vd9/i7puA13ZSL8DLUcfoHmN7EvBN1PsfA5Mq30SNFmwHZgTLecAH7r4jWI6udx11DF+b2TVmlm1m2fXELCKyR9u0aRPLly9n27Zt5OXlATB//nwA5s6dy8iRIxk6dCg//elPWbp0KSUlJRQWFlJcXMzatWv517/+xRVXXMFjjz3GAQccQEFBAV26dKFz584MHjyY+fPnM2rUKN577z0qKipqXeetKSHsBptZOvA0cK67f1tHmWkEw6w1PFRHsvUY7w24x92frFF39xplLwZ+BAx09x1mVgi0rSv+qDLjgE+ARUR6wkcDS+KIbWe2BX+WE/vvorRGbFZH/TvcvXJ9RWW97l5hZtH1tg3qrB20+x8JrqGbWUPaICKyRznooIOqeqp9+/YFYODAgbg7kyZNIiUlhQceeACAPn0iV+3atWsHwMqVK/nFL37B888/z4knngjAscceC8DRRx/NsmXLGDhwIBMnTmTIkCG0atWqantdQk20wY03LwOXuvtndZVz99ENrPp8M7uHyJDp6USGh0uB35jZ8+5eYmZdgR1EhlLbR+17MLAuSKBDgSPjON6HRIZ2ryDSS3wImB+V3KLLZZnZvUTO7U+AysRfM454LAH+M+r928D1wM0AZtYxqlcbj15UH4oWEWkxZs2axZQpU+jbty8ZGRkA/O53v2PlypUAjB8/nrvvvptvv/2Wa6+N3EObkJBAdnZkoO+xxx7j4osvZvv27Rx11FE8++yzcR230YnWzKYSSXKHmtlq4C53f8bMxgO4+2TgTuAQ4A/BZdAydz+usceMMg94EzgC+I27rwHWmFkKMDs4VglwibuvMLNZwc+Q3gLuA14PhkhzgKVxHO8j4JfAbHf/3sy2UnvYGHdfEPTOc4Ava5TJAiabWSmRa8v1cvelZnawmbV398prr5OCtpQDv+aH4ed4DCVy3kREWpyTTz6Z2v2j6p5++mmefjr2LyozMjKqkm5DWH0H3dOY2USgxN0faO5Ydgcz+7/AZnffpd/Smtl+wAfAye5eVk9ZP3LCG7tyuGq+vG8EAGlZaU1Wp4hILPmZ+fUm05DUeVOtngy153uCH67l7oojgNvqS7IiItK0Qr8Zqqm5+8TmjmF3cvetwJQmqGc5sHzXIxIRkYZQj1ZERCRESrQiIiIhUqIVEREJkRKtiIhIiJRoRUREQqREKyIiEiIlWhERkRAp0YqIiIRIiVZERCRESrQiIiIhUqIVEREJkRKtiIhIiJRoRUREQrTXzUcr4WuTmOhlO3Y0WX0HJLZmu0HZtvImq1NEJJak5CTWrFrTHIeucz7avW6aPAlfv/R0srOzmzsMEZF9goaORUREQqREKyIiEiIlWhERkRAp0YqIiIRIiVZERCRESrQiIiIhUqIVEREJkRKtiIhIiJRoRUREQqRHMEotdT2CUY9S3L2a8VFyItJwdT6CUYlWajEzP3LCG7XWf3nfCADSstJ2d0gtUn5mPvr3KbLXqDPRauhYREQkREq0IiIiIVKiFRERCZESrYiISIiUaEVEREKkRCsiIhIiJVoREZEQKdGKiIiESIlWREQkREq0IiIiIVKiFRERCZESrYiISIiUaEVEREKkRCsiIhIiJVqRvdCMGTPo3bs3PXv25N577621/f777ycjI4OMjAzS0tJo3bo169evZ+vWrRx//PH069eP1NRU7rrrrmaIXqRlaXCiNbNuZvaemS0xs8VmdlMd5Q42s9fNLDcoN27Xww2XmWWZ2ahG7DfezC6Lsb67meUHyxlmNjxq20QzuyWOus3M3jWzgxoaV4y63jGzjrtajzSv8vJyrrvuOt566y0KCgqYOnUqBQUF1crceuut5OTkkJOTwz333MNpp51Gp06d2G+//Xj33XfJzc0lJyeHGTNmMGfOnGZqiUjL0JgebRnwn+6eApwAXGdmx8Yodx1Q4O79gNOBB80ssdGR7sHcfbK7/6WeYhnA8HrKxDIcyHX3TY3Yt6YpwLVNUI80o3nz5tGzZ0+OOuooEhMTGTNmDK+++mqd5adOncrYsWMBMDPatWsHwI4dO9ixYwdmdc5XLSJNoMGJ1t3XuvuCYHkzsAToGqso0N4i/4rbAeuJJOlGM7PTzCwneC00s/bB+lvN7FMzW2Rmvw7WdTezpWb252D9dDM7INh2Z1A+38z+aDv5n8bMOpvZ/GC5n5m5mR0RvF9hZgdE907NbGDQi59N5MsGwReMu4HRQeyjg+qPNbP3zewLM7uxjhAuBqr+FzWzy4L25JrZlGBdlpk9EYw0fBGcpz8Fow5ZUXW9Boxt0EmXPU5RURHdunWrep+cnExRUVHMslu2bGHGjBmMHDmyal15eTkZGRl07tyZs846i8GDB4ces0hLtkvXaM2sO9AfmBtj8+NACrAGyANucveKGHVMi0qe0a9aQ7HALcB17p4BnAKUmtkw4BjgeCK9xoFmdmpQvjfwR3dPBzbxQ2/ucXcf5O5pwP7AiLra6O7rgLbB0O0pQDZwipkdCaxz9y01dnkWuNHdh0TVsR24E5jm7hnuPi3Y1Ac4O4j9LjNrEyOEk4DKRJ8K/BI4IxgpiB627wicAfxf4HXgYSAV6GtmGUEcG4D9zOyQutorez53r7Wuru+Kr7/+OieddBKdOnWqWte6dWtycnJYvXo18+bNIz8/P7RYRWQXEq2ZtQNeAm6uY1jzbCAH6EIkAT4e6zqju48Okk/NV6yh2FnAQ0Hvr4O7lwHDgtdCYAGR5HVMUH6Vu88Klp8DTg6Wh5rZXDPLI5KcUutp7idEEt6pwO+CP08BPqpxTg4O4vogWDWlnnrfdPdt7l4MrAMOi1GmUzByQBDr9KA87r4+qtzrHvkfOA/42t3zgi82i4HuUeXWEfk7qcbMrjGzbDPLridm2c3mz58PQG5uLmVlZZSVlVFYWEhhYSHFxcUsWbKEdu3asWHDBlasWEFpaSkFBQVUVFQwefJkxo4dW1XHggULqKiooKCggP3224/09HRefvllioqKWLt2LcXFxRQWFlJSUsLSpUspKysjNze3WhyVf+bl5bFt2zaWL1/Opk2bWLlyJevWrWPdunWsXLmSTZs2sXz5crZt20ZeXl7MOirbtHTpUkpKSqratHbtWoqKimK2acGCBdXqiG5TaWkpK1asYMOGDWqT2rRb27QzFuvbcX2CntcbwD/d/aE6yrwJ3OvuHwXv3wVuc/d5NcpNI9LzrOmhWMnWzPoSuW55A/Bj4GrgM3d/ska57sAH7n5k8P6MYJ+xwJfAce6+yswmArj7xGCY9Q13n16jrsuIJPAzgSFEEm9OUPaNoI4S4Gki11Mrj5kOvODuaWaWGRzz+mDbRKDE3R8I3ucDI9y9sMaxNwCHuHtF8AWjs7v/qkaZqriDdr8R9Nap2aZgGHy0u38e45xX1udHTnij1vov74t0/NOy0uraVZpQfmZ+zN5rWVkZvXr1YubMmXTt2pVBgwbxwgsvkJpa/fvixo0b6dGjB6tWreLAAw8E4JtvvqFNmzZ06NCB0tJShg0bxoQJExgxos5BHRGJT52XIBtz17EBzwBL6kqygZVEEhNmdhiRZPpFzUIN6dGa2dFBT+0+IkO4fYB/AlcEPWzMrKuZdQ52OcLMKodwxwIfA22D98XBPvHcZfwhcAmwPOglrieS7GdFF3L374CNZlbZc744avNmoH0cx6ppGXBUsDwTuKhy6NfMOtW5VwzB393hQGEj4pA9REJCAo8//jhnn302KSkpXHTRRaSmpjJ58mQmT55cVe6VV15h2LBhVUkWYO3atQwdOpT09HQGDRrEWWedpSQrErKERuxzEnApkGdmOcG6/3b3f5jZeIjchQv8BsgKhmcNmFA55LkLbjazoUA5UAC85e7bzCwFmB1cpyohkhTLidyodbmZPQksB55w9y1m9hSRIdZC4NP6DuruhUHdHwarPgaSg2ueNY0D/mRmW4h8Caj0HnBbcM7uaUCb3yRy1/bn7r7YzP4H+MDMyokMl2c2oK6BwJxgyF32YsOHD2f48Oo3sY8fP77a+8zMTDIzM6utS09PZ+HChWGHJyJRGjV0vDeoOYS6tzKzJOAv7n5WE9T1KPCau8+sp5yGjvcAdQ0di8geqemGjmX3cve1wFOxbiRrhPz6kqyIiDStxgwd7xWCm4r2ia6Xu7/YRPU81RT1iIhI/NSjFRERCZESrYiISIiUaEVEREKkRCsiIhIiJVoREZEQKdGKiIiESIlWREQkREq0IiIiIVKiFRERCZESrYiISIiUaEVEREKkRCsiIhIiJVoREZEQ7bPz0UrjtUlM9LIdO2qtPyCxNdsNyraVN0NULU9SchJrVq1p7jBEJD51zke7z06TJ43XLz2d7Ozs5g5DRGSfoKFjERGRECnRioiIhEiJVkREJERKtCIiIiFSohUREQmREq2IiEiIlGhFRERCpEQrIiISIiVaERGREOkRjFJLXY9gbJXYiortFc0QUcujxy+K7HXqfASjEq3UYmZ+5IQ3aq3/8r4RpGWlNUNELU9+Zj76tymyV6kz0WroWEREJERKtCIiIiFSohUREQmREq2IiEiIlGhFRERCpEQrIiISIiVaERGRECnRioiIhEiJVkREJERKtCIiIiFSohUREQmREq2IiEiIlGhFRERCpEQrIiISIiVakb3MjBkz6N27Nz179uTee++ttf3+++8nIyODjIwM0tLSaN26NevXr2fVqlUMHTqUlJQUUlNTefTRR5shepGWp0GJ1sxam9lCM6s9WWlk+61mlhO88s2s3Mw6NU2occfYwcyujbNsSUPW7wozyzCz4VHvJ5rZLXHsZ2b2rpkd1AQxvGNmHXe1Hmk+5eXlXHfddbz11lsUFBQwdepUCgoKqpW59dZbycnJIScnh3vuuYfTTjuNTp06kZCQwIMPPsiSJUuYM2cOkyZNqrWviDS9hvZobwKW1LXR3e939wx3zwBuBz5w9/W7EF9jdADiSrS7WQYwvL5CMQwHct19UxPEMIU989xInObNm0fPnj056qijSExMZMyYMbz66qt1lp86dSpjx44FICkpiQEDBgDQvn17UlJSKCoq2i1xi7RkcSdaM0sGzgOejnOXscDUxgRV47gTzWxK0KtbbmZXR2271cw+NbNFZvbrYPW9wNFBr/p+M2tnZjPNbIGZ5ZnZ+Q08fq1jmFl3M1tiZk+Z2WIze9vM9g+2DQrKzg6On29micDdwOggrtFB9cea2ftm9oWZ3VhHCBcDVf+TmtllQf25ZjYlWJdlZk+Y2XtBXaeZ2Z+CGLOi6nqNyN+L7KWKioro1q1b1fvk5OQ6k+WWLVuYMWMGI0eOrLWtsLCQhQsXMnjw4NBiFZGIhAaUfQT4L6B9fQXN7ADgHOD6OrZPA3rH2PSQu/8lxvp04ATgQGChmb0JpAHHAMcDBrxmZqcCtwFpQa8aM0sALnD3TWZ2KDDHzF5zd4+jHcPqOMbKYP1Yd7/azF4ERgLPAc8C17j7J2Z2L4C7bzezO4Hj3P36oO6JQB9gKJFzuszMnnD3HTXCOAn4j2CfVOCXwEnuXlxjWL4jcAbwU+D1YL+rgE/NLMPdc9x9g5ntZ2aHuPu39bVf9jyxPrZmFrPs66+/zkknnUSnTtWv3pSUlDBy5EgeeeQRDjpol69IiEg94urRmtkIYJ27z4+z3p8As+oaNnb30ZVDzDVesZIswKvuXuruxcB7RBLfsOC1EFhAJGkdEyt84Hdmtgh4B+gKHBZnO3Z2jH+7e06wPB/obmYdgPbu/kmw/oV66n/T3bcF7VpXR1yd3H1zsHwGMD0oT43z+3rw5SEP+Nrd89y9AlgMdI8qtw7oUvMgZnaNmWWbWXY9MctuMn/+/Gp/5ubmcvjhh7N06VJKSkooLCxk2bJltG/fnqKiIjZs2MCKFSsoLS2tun57wgknVKtj7ty5/PznP+fMM8/k3HPPZcWKFWzYsIGioiLWrl1LcXExhYWFlJSUsHTpUsrKysjNzY0ZT15eHtu2bWP58uVs2rSJlStXsm7dOtatW8fKlSvZtGkTy5cvZ9u2beTl5dXZprKysmptKi4uZu3atTHbVFFRwYIFC6rVsWDBAioqKigoKKC0tFRtUpuapU07Y3F07DCze4BLgTKgLXAQ8LK7X1JH+VeAv7l7zETTkB5t0PMzd78reP8X4CXgVOAzd3+yRvnuwBvunha8zwTOBS5x9x1mVgic7u6FZlbi7u1ixFfi7u3M7ME4j3EL0A54FMhx9yOD9enAC+6eFsRRs0db4u4PBO/zgRHuXljjWBuAQ9y9Ihhe7uzuv6pRJiuIZ3qM2Kq2Be/nA6Pd/fOa7Y6qz4+cUPt+ty/vG0FaVlpdu0kTys/Mj9l7LSsro1evXsycOZOuXbsyaNAgXnjhBVJTU6uV27hxIz169GDVqlUceOCBQKQ3fPnll9OpUyceeeSR3dEMkZYk9tAScfZo3f12d0929+7AGODdnSTZg4HTiLquGKO+hvZozzeztmZ2CHA68CnwT+AKM2sXHLermXUGNlN9ePtgIr3xHWY2FDgynjYH6jpGXe3aAGw2sxOCVWOiNteMK17LgKOC5ZnARcF5wBp4R7dFxhgPBwobEYfsARISEnj88cc5++yzSUlJ4aKLLiI1NZXJkyczefLkqnKvvPIKw4YNq0qyALNmzWLKlCm8++67VT//+cc//tEczRBpURpyjTYmMxsP4O6V/8ovAN529+93te4o84A3gSOA37j7GmCNmaUAs4NrVCVEeq0rzGxW0EN8C7gPeD0YEs0BlsZ7UHd/O9YxgPKd7HYl8JSZfQ+8D2wM1r8H3GZmOcA98cZApN2nA5+7+2Iz+x/gAzMrJzKkndmAugYCc9y9rAH7yB5m+PDhDB9e/Qb28ePHV3ufmZlJZmZmtXUnn3xyzF6yiIQrrqHj5lRziHVPZ2bt3L0kWL4NSHL3m3ahviTgL+5+VhPE9ijwmrvPrKecho6bWV1DxyKyx6pz6HiXe7RSy3lmdjuRc/slDetx1uLua4OfER3UBL+lza8vyYqISNPa4xOtu09s7hgawt2nAdOauM4Xm6iep5qiHhERiZ+edSwiIhIiJVoREZEQKdGKiIiESIlWREQkREq0IiIiIVKiFRERCZESrYiISIiUaEVEREKkRCsiIhIiJVoREZEQKdGKiIiESIlWREQkREq0IiIiIdrj56OV3a9NYqKX7dhRa32rxFZUbK9ohohanqTkJNasWtPcYYhI/DQfrcSvX3o62dnZzR2GiMg+QUPHIiIiIVKiFRERCZESrYiISIiUaEVEREKkRCsiIhIiJVoREZEQKdGKiIiESL+jFRHZx+3YsYPVq1ezdevW5g5lr9e2bVuSk5Np06ZN3Pso0YqI7ONWr15N+/bt6d69O2Z1PsBI6uHufPvtt6xevZoePXrEvZ+GjqWWnJyFtGmbgJk1+NWlW5fmDl9Eati6dSuHHHKIkuwuMjMOOeSQBo8MqEcrtZSXV0A5pGWlNXjf/Mz8ECISkV2lJNs0GnMe1aMVEREJkRKtiEgLk5R8RKMuDdX1Sko+osliy8rKYs2afWvmKg0di4i0MF8VreLICW80WX1f3jeiyerKysoiLS2NLl32nfs91KMVEZFQff/995x33nn069ePtLQ0pk2bxvz58znttNMYOHAgZ599NmvXrmX69OlkZ2dz8cUXk5GRQWlpKTNnzqR///707duXK664gm3btgFw2223ceyxx5Kens4tt9wCwOuvv87gwYPp378/P/7xj/n666+bs9lVlGhFRCRUM2bMoEuXLuTm5pKfn88555zDDTfcwPTp05k/fz5XXHEFv/zlLxk1ahTHHXcczz//PDk5OZgZmZmZTJs2jby8PMrKynjiiSdYv349r7zyCosXL2bRokX86le/AuDkk09mzpw5LFy4kDFjxvC///u/zdzyCA0di4hIqPr27cstt9zChAkTGDFiBB07diQ/P5+zzjoLgPLycpKSkmrtt2zZMnr06EGvXr0AuPzyy5k0aRLXX389bdu25aqrruK8885jxIjI0PXq1asZPXo0a9euZfv27Q36rWuY1KMVEZFQ9erVi/nz59O3b19uv/12XnrpJVJTU8nJySEnJ4e8vDzefvvtWvu5e8z6EhISmDdvHiNHjuTvf/8755xzDgA33HAD119/PXl5eTz55JN7zJOwlGhFRCRUa9as4YADDuCSSy7hlltuYe7cuXzzzTfMnj0biDwicvHixQC0b9+ezZs3A9CnTx8KCwv5/PPPAZgyZQqnnXYaJSUlbNy4keHDh/PII4+Qk5MDwMaNG+natSsAf/7zn3dzK+umoWMRkRbm8K7dmvRO4cO7dtvp9ry8PG699VZatWpFmzZteOKJJ0hISODGG29k48aNlJWVcfPNN5OamkpmZibjx49n//33Z/bs2Tz77LNceOGFlJWVMWjQIMaPH8/69es5//zz2bp1K+7Oww8/DMDEiRO58MIL6dq1KyeccAL//ve/m6yNu8Lq6ppLy2VmDo1/MpQ+UyJ7liVLlpCSktLcYewz6jifdT4ySkPHIiIiIVKiFRERCZESrYiISIiUaEVEREKkRCu7zYwZM+jduzc9e/bk3nvvrbV96dKlDBkyhP32248HHnig2rYrrriCzp07k5bW8Bu0RESaU72J1sw6mNl0M1tqZkvMbEiMMn3MbLaZbTOzW8IJtWmZWZaZjYp3fRMc77+jlrubWVwTt5rZzWZ2WRMc/3ozG7er9TRWeXk51113HW+99RYFBQVMnTqVgoKCamU6derE73//+6rnlkbLzMxkxowZuytcEZEmE0+P9lFghrv3AfoBS2KUWQ/cCDwQY5tE/Hf9RaozswTgCuCFJjj+n4j8HTWLefPm0bNnT4466igSExMZM2YMr776arUynTt3ZtCgQbRp06bW/qeeeiqdOnXaXeGK7NO6Jyc16TR5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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "explainer.plot_feature_importances(\n",
    "    X = X_test[0, :].reshape(1, -1),\n",
    "    importance_method = 'pe',\n",
    "    grouping_threshold = 0.0,\n",
    "    target = None,\n",
    "    barh_kw = {'edgecolor' : 'k'},\n",
    "    show = True\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "950354b9",
   "metadata": {},
   "source": [
    "We can use the ``average_partial_effects`` directly to obtain an array with numeric explanations, making it easy to manipulate the values to assess stabilities."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "3c3ea1c1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[6.85112219e-03, 5.00492617e-02, 4.76003440e-02, 1.51608147e-01],\n",
       "       [2.74413002e-04, 3.40860669e-03, 1.31835324e-03, 6.55848291e-03],\n",
       "       [1.03778588e-01, 6.74201575e-01, 6.71034697e-01, 2.10067814e+00]])"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "explainer.average_partial_effects(X_test[0, :].reshape(1, -1))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5b951658",
   "metadata": {},
   "source": [
    "The function returns an array, where each line corresponds to the importance for each class. As we can see from the bar plot, the total importance for a given feature is the summation of the importance for each class:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "54d685d3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.11090412, 0.72765944, 0.71995339, 2.25884477])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.sum(\n",
    "    explainer.average_partial_effects(X_test[0, :].reshape(1, -1)),\n",
    "    axis=0\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "95424fe5",
   "metadata": {},
   "source": [
    "## Stability of an explanation\n",
    "\n",
    "In the mentioned paper, the authors discuss metrics to evaluate model agnostic explainers.\n",
    "\n",
    "The stability measures how much the explanation changes when the feature slightly changes, where lower values are better. Higher values imply that, when the feature being explained changes in a small proportion, the feature importances responds in a much larger proportion, then the explainer is not reliable since it is not locally stable, and cannot be trusted for the given instance.\n",
    "\n",
    "Let $f:\\mathbf{x} \\rightarrow y$, with $\\mathbf{x} = \\{x_0, x_1, ..., x_n\\}$ be a model we want to explain, and $g: (f, \\mathbf{x}_i) \\rightarrow \\mathbf{e}$ a explainer that takes a model and a instance to explain and attributes one feature importance for each $x \\in \\mathbf{x}_i$. \n",
    "\n",
    "The stability of the explanation is calculated by:\n",
    "\n",
    "$$S(f, g, \\mathbf{x}_i, \\mathbf{N}_{\\mathbf{x}_i}) = \\mathbb{E}_{\\mathbf{x}_j \\sim \\mathbf{N}_{\\mathbf{x}_i}} \\left [ || g(\\mathbf{x}_i, f) - g(\\mathbf{x}_j, f)||_{2}^{2} \\right ].$$\n",
    "\n",
    "In other words, the stability function evaluates the mean distance between the explanation for the original input and all sampled neighbors."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "cb609adc",
   "metadata": {},
   "outputs": [],
   "source": [
    "def explain_single(x):\n",
    "    \"\"\"wrapping the process to explain a single instance.\n",
    "    \n",
    "    The input x should be a single observation of shape (n_features, ).\n",
    "    \"\"\"\n",
    "    \n",
    "    return np.sum(\n",
    "        explainer.average_partial_effects(x.reshape(1, -1)),\n",
    "        axis=0\n",
    "    )\n",
    "\n",
    "\n",
    "def norm_p2(vector):\n",
    "    \"\"\"p2 norm of a vector.\n",
    "    \n",
    "    the vector should be an array of shape (n, ).\n",
    "    \"\"\"\n",
    "    \n",
    "    return np.sqrt(np.sum(np.abs(np.power(vector, 2))))\n",
    "\n",
    "\n",
    "def stability(explainer, x, neighborhood):\n",
    "    \"\"\"Stability function.\n",
    "    \n",
    "    Takes as argument an explanation method, a single observation\n",
    "    x of shape (n_features, ), and the neighborhood as a matrix of\n",
    "    shape (n_neighbors, n_features), where each line is a sampled\n",
    "    neighbor and each column is the feature value of the sample.\n",
    "    \n",
    "    Returns the mean squared p2-norm of the difference between the\n",
    "    original explanation and every sampled neighbor.\n",
    "    \"\"\"\n",
    "    \n",
    "    original_explanation = explainer(x)\n",
    "    return np.nanmean([\n",
    "        norm_p2(explainer(nb) - original_explanation)**2\n",
    "        for nb in neighborhood\n",
    "    ])\n",
    "        \n",
    "    \n",
    "def neighborhood(x, factor, size=100):\n",
    "    \"\"\"Method to create samples around a given observation x.\n",
    "    \n",
    "    This method uses a multivariate normal distribution to \n",
    "    randomly select feature values. The sigma of the distribution\n",
    "    is calculated over the training data to mimic the original\n",
    "    distributions and a scaling factor is multiplied to \n",
    "    adjust how large will be the neighborhood.\n",
    "    \n",
    "    It is possible to specify the number of generated samples\n",
    "    by setting the size to a different value (default=100).\n",
    "    \n",
    "    Returns a matrix of shape (size, n_features) containing\n",
    "    the sampled neighbors.\n",
    "    \"\"\"\n",
    "    \n",
    "    cov = np.cov(X_train.T)\n",
    "\n",
    "    return np.random.multivariate_normal(x, cov*factor, size=size)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "cf2fc761",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.01040152988347714"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stability(\n",
    "    explain_single,\n",
    "    X_test[0],\n",
    "    neighborhood(X_test[0], 0.001)\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e8469106",
   "metadata": {},
   "source": [
    "## Increasing the neighborhood to measure stability\n",
    "\n",
    "In the original work, the authors used fixed values for creating the neighborhood to evaluate stability.\n",
    "\n",
    "I think this can be limiting in some situations. To verify, we will evaluate how stability changes when we increase the size of the neighborhood."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "83eb27cb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, axs = plt.subplots(1, 1, figsize=(8,4))\n",
    "\n",
    "factors = np.linspace(0.001, 1, 100)\n",
    "\n",
    "axs.plot(\n",
    "    factors,\n",
    "    [stability(\n",
    "        explain_single,\n",
    "        X_test[0],\n",
    "        neighborhood(X_test[0], factor, size=20)\n",
    "    ) for factor in factors]\n",
    ")\n",
    "\n",
    "axs.set_title(\"Stability of explanation (smaller is better)\")\n",
    "axs.set_ylabel(\"Stability\")\n",
    "axs.set_xlabel(\"Multiplying factor\")\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3a1d7171",
   "metadata": {},
   "source": [
    "## The Jaccard Index\n",
    "\n",
    "In _Zhengze Zhou, Giles Hooker, Fei Wang. \"S-LIME: Stabilized-LIME for Model Explanation\".\tIn Proceedings of the 27th ACM SIGKDD Conference on Knowledge Discovery and Data Mining (KDD '21), August 14--18, 2021, Virtual Event, Singapore_, the authors used the Jaccrd index to evaluate the stability of a function.\n",
    "\n",
    "$$J(A, B) = \\frac{|A \\cap B|}{|A \\cup B|}.$$\n",
    "\n",
    "This method ignores ordering, and is only concerned if the most important features will always be the same. Values close to 1 means that the algorithm is stable accros different iterations.\n",
    "\n",
    "The Jaccard index is the ratio of the intersection over the union of two data sets. In the paper, to evaluate the stability for aa given test instance $t$, they:\n",
    "1. Execute the explanation method 20 times;\n",
    "2. Saved the $k$ most important features (with $k=\\{1, 2, 3, 4, 5\\}$);\n",
    "3. For each value of $k_i$, the $k_i$ most important features for each execution were used to calculate the Jaccard index across all possible pairs (20*19 pairs), then the average was reported.\n",
    "\n",
    "Their result look like this:\n",
    "\n",
    "| k | Jaccard Index for the method |\n",
    "|---|:----------------------------:|\n",
    "| 1 |             1.0              |\n",
    "| 2 |             0.2              |\n",
    "| 3 |             0.8              |\n",
    "| 4 |             0.7              |\n",
    "| 5 |             0.0              |\n",
    "\n",
    "\n",
    "### Adaptating the Jaccard Index\n",
    "\n",
    "In the cell below the Jaccard Index is used to evaluate stability, but since the Partial Effects explanation method is deterministic, the calculation will be performed on the neighborhood of the test point. We can use ``explain_single`` and ``neighborhood`` functions previously declared."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "154e3d22",
   "metadata": {},
   "outputs": [],
   "source": [
    "def jaccard_index(A, B):\n",
    "    \"\"\"Method to calculate the ratio of the intersection\n",
    "    over the union of two sets. This is known as Jaccard\n",
    "    index and ranges from 0 to 1, measuring how simmilar\n",
    "    the two sets are. A value equals to 1 means that the \n",
    "    sets are identical (remembering that sets does not\n",
    "    have order relations between its elements), and a \n",
    "    value equals to 0 means that they are completely\n",
    "    different. \n",
    "    \n",
    "    Takes as argument two python built-in sets A and B.\n",
    "    \n",
    "    Returns a float number representing the Jaccard Index.\n",
    "    \"\"\"\n",
    "    \n",
    "    return len(A.intersection(B)) / len(A.union(B))\n",
    "\n",
    "\n",
    "def get_k_most_important(explanation, k):\n",
    "    \"\"\"Method that takes an array of explanation and \n",
    "    returns the index of the k most important (highest)\n",
    "    values in the array.\n",
    "    \n",
    "    Takes an array of explanations of shape (n_features, )\n",
    "    and an integer k representing the size of the subset,\n",
    "    k <= len(explanations).\n",
    "    \n",
    "    Returns a python built-in set containing the indexes\n",
    "    of the k highest values.\n",
    "    \"\"\"\n",
    "    \n",
    "    # Reversing the order so its in descending order\n",
    "    order = np.argsort(explanation)[::-1]\n",
    "\n",
    "    \n",
    "    return set(order[:k])\n",
    "    \n",
    "\n",
    "def jaccard_stability(explainer, x, neighborhood, k):\n",
    "    \"\"\"Jaccard adaptation Stability function.\n",
    "    \n",
    "    Takes as argument an explanation method, a single observation\n",
    "    x of shape (n_features, ), the neighborhood as a matrix of\n",
    "    shape (n_neighbors, n_features), and the size of the subset being\n",
    "    considered k\n",
    "    \n",
    "    Returns the mean Jaccard Index between the original sample\n",
    "    and all neighbors, considering how similar the k most important\n",
    "    subset of features between the explanation of the original data\n",
    "    and its neighbors.\n",
    "    \"\"\"\n",
    "    \n",
    "    original_explanation = explainer(x)\n",
    "    original_jaccard_set = get_k_most_important(original_explanation, k)\n",
    "    \n",
    "    return np.nanmean([\n",
    "        jaccard_index(\n",
    "            get_k_most_important(explainer(nb), k),\n",
    "            original_jaccard_set\n",
    "        )\n",
    "        for nb in neighborhood\n",
    "    ])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "69239668",
   "metadata": {},
   "source": [
    "In te cell below we create a table similar to the one reported in the S-LIME paper. For different multiplication factors that adjusts the size of the neighborhood, we can see how stable the explanations are in terms of returning the same most important features.\n",
    "\n",
    "Notice that the maximum number of features is 4."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "6aa92aa3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>k=1</th>\n",
       "      <th>k=2</th>\n",
       "      <th>k=3</th>\n",
       "      <th>k=4</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>factor 0.001</th>\n",
       "      <td>1.00</td>\n",
       "      <td>0.746667</td>\n",
       "      <td>1.000</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>factor 0.01</th>\n",
       "      <td>1.00</td>\n",
       "      <td>0.713333</td>\n",
       "      <td>1.000</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>factor 0.1</th>\n",
       "      <td>1.00</td>\n",
       "      <td>0.660000</td>\n",
       "      <td>1.000</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>factor 1.0</th>\n",
       "      <td>0.95</td>\n",
       "      <td>0.673333</td>\n",
       "      <td>0.945</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               k=1       k=2    k=3  k=4\n",
       "factor 0.001  1.00  0.746667  1.000  1.0\n",
       "factor 0.01   1.00  0.713333  1.000  1.0\n",
       "factor 0.1    1.00  0.660000  1.000  1.0\n",
       "factor 1.0    0.95  0.673333  0.945  1.0"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ks = [1, 2, 3, 4]\n",
    "fs = [0.001, 0.01, 0.1, 1.0]\n",
    "\n",
    "jaccard_df = pd.DataFrame(\n",
    "    data   = [[jaccard_stability(explain_single, X_test[0], neighborhood(X_test[0], f, size=100), k=k)\n",
    "              for k in ks] for f in fs],\n",
    "    index   = [f'factor {f}' for f in fs],\n",
    "    columns = [f'k={k}' for k in ks]\n",
    ")\n",
    "\n",
    "display(jaccard_df)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
